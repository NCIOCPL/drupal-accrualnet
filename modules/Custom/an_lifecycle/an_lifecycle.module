<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * function that takes an array of parameters (see http://drupal.org/node/1343708 )
 * and returns an array of related nodes. This should be moved into a globals module
 * at some point.
 * Return values:
 * Array of related nodes or FALSE if none.
 */

// lifecycle Types
module_load_include('inc', 'an_lifecycle', 'includes/types');
// lifecycle stage fields
module_load_include('inc', 'an_lifecycle', 'includes/lifecycle.field');
// lifecycle strategy Fields
//module_load_include('inc', 'an_lifecycle', 'includes/lifecycle_strategy.field');


function _an_lifecycle_load_related_nodes($entityFieldQuery){
    $query = $entityFieldQuery;
    $result = $query->execute();

   
    if (isset($result['node'])) {
        $related_nids = array_keys($result['node']);
        $related_nodes = entity_load('node', $related_nids);
        return $related_nodes;
    }
    return FALSE;
    
}

/**
 * Implements hook_token_info().
 *
 * @ingroup token_example
 */
function an_lifecycle_token_info() {
// Node tokens.
  $info['tokens']['node']['system-title'] = array(
    'name' => t('System Title'),
    'description' => t("The title of the node formatted with only lowercase and _."),
    'type' => 'format'
  );
  $info['tokens']['node']['parent-stage-system-title'] = array(
    'name' => t('Parent Stage System Title'),
    'description' => t("The parent stage for a Strategy (ONLY APPLICABLE FOR STRATEGIES)."),
    'type' => 'format'
  );
  
  return $info;
}

/**
 * Implements hook_tokens().
 *
 * @ingroup token_example
 */
function an_lifecycle_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);
  $old_pattern = array("/[^a-zA-Z0-9]/", "/_+/", "/_$/");
  $new_pattern = array("_", "_", "");
  // Node tokens.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'system-title':
          if ($items = $node->title) {
            $systemTitle = strtolower(preg_replace($old_pattern, $new_pattern, $items));
            $replacements[$original] = $sanitize ? filter_xss($systemTitle) : $systemTitle;
          }
          break;
          case 'parent-stage-system-title':
            if($node->type == 'lifecycle_strategy'){ 
                if ($items = $node->field_parent_stage['und'][0]['target_id']) {
                    $parentNode = node_load($items);
                    $systemTitle = strtolower(preg_replace($old_pattern, $new_pattern, $parentNode->title));
                    $replacements[$original] = $sanitize ? filter_xss($systemTitle) : $systemTitle;
                }
            }
          break;
      }
    }

    // Chained token relationships.
    if ($format_tokens = token_find_with_prefix($tokens, 'parent-stage-system-title')) {
      if($node->type == 'lifecycle_strategy'){ 
                if ($items = $node->field_parent_stage['und'][0]['target_id']) {
                    $parentNode = node_load($items);
                    $systemTitle = strtolower(preg_replace($old_pattern, $new_pattern, $parentNode->title));
                   $replacements += token_generate('format', $format_tokens, array('format' => $systemTitle), $options);
                }
            }
    }
  } if ($format_tokens = token_find_with_prefix($tokens, 'system-title')) {
      if ($items = $node->title) {
        $systemTitle = strtolower(preg_replace($old_pattern, $new_pattern, $items));
        $replacements += token_generate('format', $format_tokens, array('format' => $systemTitle), $options);
      }
    }

 

  return $replacements;
}

/*
 * hook_node_info()
 * 
 * Sets up the Resource content type
 */
function an_lifecycle_node_info() {
    global $an_lifecycle_types;
    $lifecycleTypes = array();
    // For every resource type, create the content type
    foreach ($an_lifecycle_types as $type => $properties) {
        $lifecycleTypes[$type] = array (
            'name' => $properties['name'],
            'base' => 'node_content',
            'description' => $properties['description'],
            'custom' => TRUE, // Line for Debugging
        );
        // If the content type has a title defined, set it
        if (array_key_exists('title', $properties)) {
            $lifecycleTypes[$type]['has_title'] = TRUE;
            $lifecycleTypes[$type]['title_label'] = $properties['title'];
        } else {
            $lifecycleTypes[$type]['has_title'] = FALSE;
        }
    }
    return $lifecycleTypes;
}

/**
 *hook_enable implementation.
 * 
 * Sets up content types and fields for the lifecycle section of the AN Site.
 * @global type $an_lifecycle_types
 * @global type $an_lifecycle_fields 
 */
function an_lifecycle_enable() {
    
    
    global $an_lifecycle_fields;
    // Rebuild the types --this may be unnecessary
    node_types_rebuild();
   
    
    // Create the custom fields for all types of resources
    foreach (_an_lifecycle_fields() as $field) {
        //Check to see if this field exists:
        field_read_field($field['field_name']) == FALSE ? field_create_field($field) : '';
        //field_create_field($field);
    }
    
    $instance = array();
    foreach ($an_lifecycle_fields as $field) {
        foreach($field['bundles'] as $bundle) {
            //if this instance does not already exist.
            if(field_read_instance($field['entity_type'], 'field_' .$field['field_name'], $bundle) == FALSE)
            {
                $instance['field_name'] = 'field_' . $field['field_name'];
                $instance['entity_type'] = $field['entity_type'];
                $instance['label'] = $field['label'];

                if (array_key_exists('widget', $field)) { 
                    $instance[count($instances)-1]['widget'] = $field['widget'];
                }
                $instance['bundle'] = $bundle;
                field_create_instance($instance);
            }
        }
    }
   
        
    
}


/*
 * hook_disable()
 * 
 * Removes the content type, instances of fields, and specific content type fields. 
 * As of right now, does not delete all content associated with it.
 */


function an_lifecycle_disable() {
    // Variables
    /*
    global $an_lifecycle_types;
    // Alert the user the module has been disabled, mostly used for testing
    drupal_set_message($message = 'Resource Module Disabled.');
    
    // Remove all of the fields created for any type of resource
    foreach (array_keys(_an_lifecycle_fields()) as $field) {
        field_delete_field($field);
    }
    
    // For each type of resource, remove all instances associated with it
    foreach ($an_lifecycle_types as $type => $properties) {
        $instances = field_info_instances('node', $type);
        foreach ($instances as $instanceName => $instance) {
            field_delete_instance($instance);
        }
    }

    // Remove each resource type as a recognized piece of content type for drupal
    foreach (array_keys($an_lifecycle_types) as $type) {
        node_type_delete($type);
    }

    // Purge all field information; this is from a sample, not sure what it does
    field_purge_batch(1000);*/
}




function _an_lifecycle_fields() {
    
    // Generic Resource Fields
    $fields = _an_lifecycle_field_lifecycle();
    return $fields;
}


