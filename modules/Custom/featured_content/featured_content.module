<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */



// include lifecycle Types
module_load_include('inc', 'featured_content', 'includes/featured_content.types');
// include lifecycle fields
module_load_include('inc', 'featured_content', 'includes/featured_content.field');
// Load Resource Types
module_load_include('inc', 'resource', 'includes/types');

/**
 *
 * @return type 
 */
function featured_content_block_info(){
    $blocks['cta_join_conversation'] = array(
      'info' => t('CTA - Join the Conversation'),
      'region' => 'sidebar_first',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'pages' => "user/*\nuser\n<front>\nsearch/*"
    ); 
    $blocks['cta_add_resource'] = array(
      'info' => t('CTA - Add a Resource'),
      'region' => 'sidebar_first',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'pages' => "user/*\nuser\n<front>\nsearch/*"
    ); 
    
    return $blocks;
}


function featured_content_block_view($delta = '') {
    $block = array();
    switch($delta){
    case 'cta_join_conversation':
      $block['subject'] = t('Join the Conversation');
      if(user_access('access content')){
            if(!user_is_logged_in()){
            $result = '<div class="cta-box">';
            $result .= t('Talk to fellow professionals on the topics that matter most.');
            $result .= '<div class="cta-button"><span class="button"><a href="/user/register" title="Sign Up Now">Sign Up Now</a></span></div>  ';
            $result .= '</div>';
            }
            else{
            $result = '<div class="cta-box">';
            $result .= t('Talk to fellow professionals on the topics that matter most.');
            $result .= '<div class="cta-button"><span class="button"><a href="/node/add/conversation" title="Start a Conversation">Start a Conversation</a></span></div>  ';
            $result .= '</div>';
            }
        
            if (empty($result)) { //No content in the last week.
            $block['content'] = t('There has been an error. Please contact the site administrator.');  
            } 
            else {
            //Pass data through theme function.
            $block['content'] = $result;
            }
        }
        return $block;
        break;
      case 'cta_add_resource':
        $block['subject'] = t('Add a Resource');
        if(user_access('access content')){
            //Use our custom function to retrieve data.

                $result = '<div class="cta-box">';
                $result .= t('Add your resource to the best of clinical accrual knowledge.');
                $result .= '<div class="cta-button"><span class="button"><a href="/content/submit_new_resource" title="Add a Resource">Go</a></span></div>  ';
                $result .= '</div>';

            if (empty($result)) { //No content in the last week.
            $block['content'] = t('There has been an error. Please contact the site administrator.');  
            } 
            else {
            //Pass data through theme function.
            $block['content'] = $result;
            }
        }
        return $block;
        break;
        default:
            return $block;
            break;
    }
    return $block;

}

/*
 * hook_node_info()
 * 
 * Sets up the Resource content type
 */
function featured_content_node_info() {
    global $featured_content_types;
    $featuredTypes = array();
    // For every resource type, create the content type
    foreach ($featured_content_types as $type => $properties) {
        $featuredTypes[$type] = array (
            'name' => $properties['name'],
            'base' => 'node_content',
            'description' => $properties['description'],
            'custom' => TRUE, // Line for Debugging
        );
        // If the content type has a title defined, set it
        if (array_key_exists('title', $properties)) {
            $featuredTypes[$type]['has_title'] = TRUE;
            $featuredTypes[$type]['title_label'] = $properties['title'];
        } else {
            $featuredTypes[$type]['has_title'] = FALSE;
        }
    }
    return $featuredTypes;
}

/**
 *hook_enable implementation.
 * 
 * Sets up content types and fields for the lifecycle section of the AN Site.
 * @global type $an_lifecycle_types
 * @global type $an_lifecycle_fields 
 */
function featured_content_enable() {
    
    
    global $featured_content_fields;
    // Rebuild the types --this may be unnecessary
    node_types_rebuild();
   
    
    // Create the custom fields for all types of resources
    foreach (_featured_content_fields() as $field) {
        //Check to see if this field exists:
        field_read_field($field['field_name']) == FALSE ? field_create_field($field) : '';
        //field_create_field($field);
    }
    
    $instance = array();
    foreach ($featured_content_fields as $field) {
        foreach($field['bundles'] as $bundle) {
            //if this instance does not already exist.
            if(field_read_instance($field['entity_type'], 'field_' .$field['field_name'], $bundle) == FALSE)
            {
                $instance['field_name'] = 'field_' . $field['field_name'];
                $instance['entity_type'] = $field['entity_type'];
                $instance['label'] = $field['label'];
                $instance['description'] = $field['description'];
                if (array_key_exists('required', $field)){
                    $instance['required'] = $field['required'];
                }
                if (array_key_exists('instance_settings', $field)) {
                $instance['settings'] = $field['instance_settings'];
                }
                if (array_key_exists('widget', $field)) { 
                    $instance['widget'] = $field['widget'];
                }
                $instance['bundle'] = $bundle;
                field_create_instance($instance);
            }
        }
    }
    
       
}



/*
 * hook_disable()
 * 
 * Removes the content type, instances of fields, and specific content type fields. 
 * As of right now, does not delete all content associated with it.
 */
function featured_content_disable() {}


function _featured_content_display($node, $image = TRUE, $citation = TRUE, $taxonomy = TRUE){
    global $an_resource_types;
    if (isset($an_resource_types[$node->type])){
        return _resource_output_snippet($node, $image, $citation, $taxonomy);
    }
    switch($node->type) {
        case 'conversation':
            //insert convo display function
        break;
        case 'community_of_practice':
            //insert comm of practice display function
        break;
    }
    return '<div>This content type '.check_plain($node->type).' is not yet supported by this feature.</div>';
}
