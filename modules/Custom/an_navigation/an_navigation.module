<?php

/* Created By: John Doyle
 * Created On: June 11, 2012
 * Last Updated By: Doyle
 * Last Updated On: June 11, 2012
 *
 */

module_load_include('inc', 'an_navigation', 'includes/navigation.globals');
module_load_include('inc', 'an_lifecycle', 'includes/lifecycle.globals');
module_load_include('inc', 'an_taxonomy', 'includes/resource.globals');
module_load_include('inc', 'an_taxonomy', 'communities/resource.globals');
module_load_include('inc', 'an_education_pages', 'includes/education.globals');
module_load_include('inc', 'resource', 'types');

function an_navigation_block_info(){
    $blocks['left-nav'] = array(
      'info' => t('Left Nav'),
      'region' => 'sidebar_first',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'pages' => array('user/*\nuser\n<front>\nsearch/*')
    ); 
    
    return $blocks;
}

function an_navigation_block_view($delta = '') {
 
    switch($delta){
    case 'left-nav':
      $block['subject'] = t('Left Navigation');
      if(user_access('access content')){
        //Use our custom function to retrieve data.
        $result = _nci_get_sub_navigation();
        
        if (empty($result)) { //No content in the last week.
          $block['content'] = t('No posts available.');  
        } 
        else {
          //Pass data through theme function.
          $block['content'] = $result;
        }
      }
      return $block;
  }

}

/*_an_navigation_resources_and_tools_submenu() - Creates the array of sub-menu
 * items for the resources and tools section. Dynamically builds out menu entries
 * based on taxonomy.
 * 
 */

function _an_navigation_literature_submenu($parentID, $base_path){
    
    global $an_resource_menu_vocab;
   // global $an_vocabularies;
    
    
    $taxonomy = array();
    $level1_weight = 0;
    foreach ($an_resource_menu_vocab as $menu_facet)
    {
        $level2_weight = 0;
        $vocabulary = taxonomy_vocabulary_machine_name_load('an_vocabulary_'.$menu_facet); 
        //taxonomy_get_tree($vocabulary->vid);
        $taxonomy = taxonomy_get_tree($vocabulary->vid);
        
        $menu_entry = array(
                'values' => array(
                    'menu_name' => 'an-main-nav',
                    'weight' => $level1_weight,
                    'link_title' => $vocabulary->name,
                    'link_path' => $base_path.'/'. $menu_facet ,
                    'module' => t('menu'),
                    'mlid' => 0,
                    'plid' => $parentID,
                ),
            );
            
        $plid_lvl2 = menu_link_save($menu_entry['values']);
        
        foreach ($taxonomy as $term) {
            //replace all special characters (not a-z, A-Z, 0-9) with '_' to represent
            //what the url path should be
            $old_pattern = array("/[^a-zA-Z0-9]/", "/_+/", "/_$/");
            $new_pattern = array("_", "_", "");
            $term_url = strtolower(preg_replace($old_pattern, $new_pattern, $term->name));
            
            //setup the menu item structure
            $menu_entry = array(
                'values' => array(
                    'menu_name' => 'an-main-nav',
                    'weight' => $level2_weight,
                    'link_title' => $term->name,
                    'link_path' => $base_path.'/'. $menu_facet . '/'.$term_url,
                    'module' => t('menu'),
                    'mlid' => 0,
                    'plid' => $plid_lvl2,
                ),
            );
            
            // Save the item to database.
            menu_link_save($menu_entry['values']);
            $level2_weight++;
        }
        
        $level1_weight++;
        
    }
    
     $menu_entry = array(
                'values' => array(
                    'menu_name' => 'an-main-nav',
                    'weight' => $level1_weight,
                    'link_title' => 'View All Resources',
                    'link_path' => 'literature/all' ,
                    'module' => t('menu'),
                    'mlid' => 0,
                    'plid' => $parentID,
                ),
            );
            
        $plid_lvl2 = menu_link_save($menu_entry['values']);
        $level1_weight++;
    
    
    
    
    //print dpm($taxonomy);
    
    
}
/* _an_navigation_education_submenu() - Creates the array of sub-menu
 * items for the education and training section. Dynamically builds out menu entries
 * based on specified types of education content.
 * 
 */
function _an_navigation_education_submenu($parentID, $base_path){
    global $an_resource_types, $an_education_menu_vocab;

    $level1_weight = 0;
    foreach ($an_education_menu_vocab as $type)
    {
		if(!isset($an_resource_types[$type]))
			continue;

        $type_info = $an_resource_types[$type];

        $menu_entry = array(
                'values' => array(
                    'menu_name' => 'an-main-nav',
                    'weight' => $level1_weight,
                    'link_title' => $type_info['name'],
                    'link_path' => "$base_path/$type" ,
                    'module' => t('menu'),
                    'mlid' => 0,
                    'plid' => $parentID,
                ),
            );

        $plid_lvl2 = menu_link_save($menu_entry['values']);

        $level1_weight++;
    }  
}
/* _an_navigation_communities_submenu() - Creates the array of sub-menu
 * items for the communities section. Dynamically builds out menu entries
 * based on taxonomy.
 * 
 */
function _an_navigation_communities_submenu($parentID, $base_path){
    global $an_communities_field_topic_options;
    $communitiesMenu = $an_communities_field_topic_options;
    $communitiesMenu['all_conversations'] = 'All Conversations';
    $communitiesMenu['communities_of_practice'] = 'Communities of Practice';
    $level1_weight = 0;
    foreach ($communitiesMenu as $machine => $name)
    {
		

        $type_info = $machine;
        if ($level1_weight < (count($an_communities_field_topic_options)))
            $path = 'communities/topics';
        else
            $path = 'communities';

        $menu_entry = array(
                'values' => array(
                    'menu_name' => 'an-main-nav',
                    'weight' => $level1_weight,
                    'link_title' => $name,
                    'link_path' => "$path/$machine" ,
                    'module' => t('menu'),
                    'mlid' => 0,
                    'plid' => $parentID,
                ),
            );

        $plid_lvl2 = menu_link_save($menu_entry['values']);

        $level1_weight++;
    }
}
/* an_navigation_resources_and_tools_submenu() - Creates the array of sub-menu
 * items for the protocol accrual lifecycle section. Manually builds out menu 
 * based on static content layout.
 * 
 */
function _an_navigation_protocol_accrual_lifecycle_submenu($parentID, $base_path)
{
    global $an_stage_strategy;
    
    
    $level1_weight = 0;
    
    $stageQuery = new EntityFieldQuery();
    $stageQuery->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'lifecycle_stage')
    ->propertyCondition("status", 1);
    
  
    
    $stageNodes = _an_lifecycle_load_related_nodes($stageQuery);
    
    //Create all 1st level Stage nodes.
    foreach ($stageNodes['nodes'] as $stage )
    {
        
        $menu_stage = $stage->title;

            
        $level2_weight = 0;
        $menu_entry = array(
                'values' => array(
                    'menu_name' => 'an-main-nav',
                    'weight' => $level1_weight,
                    'link_title' => $menu_stage,
                    'link_path' => 'node/'.$stage->nid,
                    'module' => t('menu'),
                    'mlid' => 0,
                    'plid' => $parentID,
                ),
            );
            
        $plid_lvl2 = menu_link_save($menu_entry['values']);
        
        //get all child strategies
        $strategyQuery = new EntityFieldQuery();
       // $strategyQuery->entityCondition('entity_type', 'node')
       // ->entityCondition('bundle', 'lifecycle_strategy')
       // ->fieldCondition('field_child_strategies', 'target_id', $stage->nid)
      //  ->propertyCondition("status", 1);
        if(!empty($stage->field_child_strategies)) {
            $strategyQuery = new EntityFieldQuery();
            $test = array_values($stage->field_child_strategies['und']);
            $strategyQuery->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'lifecycle_strategy')
            ->propertyCondition('nid', array_values($stage->field_child_strategies['und']));
            $strategyNodes = _an_lifecycle_load_related_nodes($strategyQuery);
        
        
        
            foreach ($strategyNodes['nodes'] as $strategy){
                $menu_strategy = $strategy->title;
                //setup the menu item structure
                $menu_entry = array(
                    'values' => array(
                        'menu_name' => 'an-main-nav',
                        'weight' => $level2_weight,
                        'link_title' => $menu_strategy,
                        'link_path' => 'node/'.$strategy->nid,
                        'module' => t('menu'),
                        'mlid' => 0,
                        'plid' => $plid_lvl2,
                    ),
                );
                // Save the item to database.
                menu_link_save($menu_entry['values']);
                $level2_weight++;
            }
        }
        //$strategies = $stage->field_child_strategies == null ? array() : $stage->field_child_strategies['und'];
               
            //foreach ($strategyNodes['nodes'] as $strategy) {
        /*foreach ($stage->field_child_strategies as $strategy){
                $menu_strategy = $strategy->title;
                //setup the menu item structure
                $menu_entry = array(
                    'values' => array(
                        'menu_name' => 'an-main-nav',
                        'weight' => $level2_weight,
                        'link_title' => $menu_strategy,
                        'link_path' => 'node/'.$strategy->nid,
                        'module' => t('menu'),
                        'mlid' => 0,
                        'plid' => $plid_lvl2,
                    ),
                );
                // Save the item to database.
                menu_link_save($menu_entry['values']);
                $level2_weight++;
            }
        */
        /*
        foreach ($strategies as $menu_strategy) {
            //replace all special characters (not a-z, A-Z, 0-9) with '_' to represent
            //what the url path should be
            $old_pattern = array("/[^a-zA-Z0-9]/", "/_+/", "/_$/");
            $new_pattern = array("_", "_", "");
            $strategy_url = strtolower(preg_replace($old_pattern, $new_pattern, $menu_strategy));
            
            //setup the menu item structure
            $menu_entry = array(
                'values' => array(
                    'menu_name' => 'an-main-nav',
                    'weight' => $level2_weight,
                    'link_title' => $menu_strategy,
                    'link_path' => $base_path.'/' . $stage_url . '/'.$strategy_url,
                    'module' => t('menu'),
                    'mlid' => 0,
                    'plid' => $plid_lvl2,
                ),
            );
            
            // Save the item to database.
            menu_link_save($menu_entry['values']);
            $level2_weight++;
        }*/
        
        $level1_weight++;
        
    }
}

/*
 * on disable, we should delete the menu that was created.
 */
function an_navigation_disable() {
    
    //delete the an-main-nav menu.
    $menu = menu_load('an-main-nav');
    if ($menu)
    {
        menu_delete_links('an-main-nav');
    }
}

function an_navigation_enable() {
    
    
    
    global $an_navigation_information;
    global $an_navigation;
    //Create a new menu
    menu_rebuild();
    $menu = array(
        'menu_name' => t('an-main-nav'),
        'title' => t('AccrualNet Main Navigation'),
        'description' => t('Provides navigation for the AccrualNet Site.')
    );
    menu_save($menu);
    $menu_id = array();
    //Create menu entries
    foreach ($an_navigation as $menu_item => $values)
    {
        $menu_entry = array(
            'values' => array(
                'menu_name' => 'an-main-nav',
                'weight' => $values['weight'],
                'link_title' => $values['link_title'],
                'link_path' => $values['link_path'],
                'module' => t('menu'),
                'mlid' => 0,
                'router_path' => $values['link_path'].'/%',
            ),
        );
        
        // Save the item to database.
        $menu_id[$menu_item] = menu_link_save($menu_entry['values']);
        $function = '_an_navigation_'.$menu_item.'_submenu';
        $function($menu_id[$menu_item], $menu_item);
    }
    
   // _an_navigation_resources_and_tools_submenu($menu_id['resources_and_tools'], 'resources_and_tools');
    //_an_navigation_protocol_accrual_lifecycle_submenu($menu_id['protocol_accrual_lifecycle']);
    
    //Now rebuild the menu system.
    // menu_rebuild();
     menu_cache_clear_all() ;
}


/*
function _nci_create_menu_entry(){
    foreach ($an_navigation as $menu_item => $values)
    {
        $menu_entry = array(
            'values' => array(
                'menu_name' => 'an-main-nav',
                'weight' => $values['weight'],
                'link_title' => $values['link_title'],
                'link_path' => $values['link_path'],
                'module' => t('menu'),
                'mlid' => 0,           
            ),
        );
        
        // Save the item to database.
        menu_link_save($menu_entry['values']);
    }
    //menu_rebuild();
}
*/

function _nci_get_sub_navigation(){
    //$newTree = menu_build_tree('an-main-nav');
    //print dpm($newTree);
    $menus = menu_tree_page_data('an-main-nav', NULL, TRUE);
   // print dpm($menus);
    foreach($menus as $menu) {
        if( $menu['link']['in_active_trail'] && !empty($menu['below']) ){
            return drupal_render( menu_tree_output($menu['below']) );
        }
    }
}
