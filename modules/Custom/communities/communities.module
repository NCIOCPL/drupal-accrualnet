<?php
/*****
 * Created By: Lauren
 * Created On: June 12, 2012
 * 
 * Last Updated By: Lauren
 * Last Updated On: June 12, 2012
 *****/
module_load_include('inc', 'an_taxonomy', 'includes/communities.globals');
module_load_include('inc', 'communities', 'includes/communities.alias');
module_load_include('inc', 'communities', 'includes/communities.types');
module_load_include('inc', 'nci_custom_user', 'includes/profilecolors');
/*
 * hook_node_info()
 * 
 * Sets up the Community and Conversation content types
 */
function communities_node_info() {
    return array(
        'community' => array(
            'name' => t('Community'),
            'base' => 'node_content',
            'description' => t('Community (Group)'),
            'has_title' => TRUE,
            'title_label' => 'Group Name',
             'custom' => TRUE, // Add this line in when debugging
        ),
        'conversation' => array(
            'name' => t('Conversation'),
            'base' => 'node_content',
            'description' => t('Conversation (Group Post)'),
            'has_title' => TRUE,
            'title_label' => 'Conversation Title',
            'custom' => TRUE, // Add this line in when debugging
        ),
    );
}

function _communities_join_snippet ($gid) {
    global $user;
    
}


/*
 * hook_enable()
 * 
 * Enables the Community and Conversation content types for full use. 
 * Adds their body and fields.
 */
function communities_enable() {
    global $an_node_community_alias;
    
    node_types_rebuild();
    $types = node_type_get_types();

    // Set the body for the Community content type
    $community_type = node_type_set_defaults($types['community']);
    node_add_body_field($community_type, 'Group Description');
    node_type_save($community_type);

    // Set the body for the Conversation content type
    $conversation_type = node_type_set_defaults($types['conversation']);
    node_add_body_field($conversation_type, 'Short highlight to tell readers what your conversation is about');
    node_type_save($conversation_type);
    
    
    if (! field_info_field(OG_GROUP_FIELD)) {
        og_create_field(OG_GROUP_FIELD, 'node', 'community');
    }
    
    if (! field_info_field(OG_AUDIENCE_FIELD)) {
        og_create_field(OG_AUDIENCE_FIELD, 'node', 'conversation');
    }
            $updateCardinality = field_info_field(OG_AUDIENCE_FIELD);
        $updateCardinality['cardinality'] = 1;
        field_update_field($updateCardinality);


    // Create all of the fields for the Community content type
    foreach (_community_fields() as $field) {
        if (field_info_field($field['field_name'])) {
        field_create_field($field);
        }
    }

    // Create all of the fields for the Conversation content type
    foreach (_conversation_fields() as $field) {
        if (!field_info_field($field['field_name'])) {
        field_create_field($field);
        }
    }

    // Create all of the instances for the Community content type
    foreach (_community_instances() as $instance) {
        if (field_read_instance('node', $instance['field_name'], 'community') == FALSE) {
        $instance['entity_type'] = 'node';
        $instance['bundle'] = 'community';
        field_create_instance($instance);
        }
    }

    // Create all of the instances for the Conversation content type
    foreach (_conversation_instances() as $instance) {
        if (field_read_instance('node', $instance['field_name'], 'conversation') == FALSE) {
        $instance['entity_type'] = 'node';
        $instance['bundle'] = 'conversation';
        //Added by doyle 7/31
        if (array_key_exists('instance_settings', $field)) {
        $instance['settings'] = $field['instance_settings'];
        }
        if (array_key_exists('widget', $field)) { 
            $instance['widget'] = $field['widget'];
        }
        //end added by doyle
        field_create_instance($instance);
        }
    }
    
    //set node alias'
    foreach($an_node_community_alias as $type => $alias) {
        $varname = 'pathauto_node_'.$type.'_pattern';
        variable_set($varname, $alias);
    //$types[] = $type;
    }
     
}



/*
 * hook_disable()
 * 
 * Removes the content types, instances of fields, and specific content type fields. 
 * As of right now, does not delete all content associated with it.
 */
function communities_disable() {
    /*field_delete_field('field_facet');
    field_delete_field('field_tax_topic');
    field_delete_field('field_topic');
    field_delete_field('group_group');
    /*
    drupal_set_message($message = 'Communities being disabled. Right now, content not deleted, but type and fields are.');

    // Delete Community content type fields
    foreach (array_keys(_community_fields()) as $field) {
        field_delete_field($field);
    }

    // Delete Conversation content type fields
    foreach (array_keys(_conversation_fields()) as $field) {
        field_delete_field($field);
    }

    // Delete Community content type instances
    $instances = field_info_instances('node', 'community');
    foreach ($instances as $instance_name => $instance) {
        field_delete_instance($instance);
    }

    // Delete Conversation content type instances
    $instances = field_info_instances('node', 'conversation');
    foreach ($instances as $instance_name => $instance) {
        field_delete_instance($instance);
    }

    // Delete the Community content type
    node_type_delete('community');

    // Delete the Conversation content type
    node_type_delete('conversation');


    // Purge all field information
    field_purge_batch(1000);
     * 
     */
}


/*
 * Internal Function
 * 
 * Community-specific fields
 */
function _community_fields() {
    //$t = get_t();
    return array(
    /* 'communities_color' => array(
      'field_name' => 'communities_color',
      'cardinality' => 3,
      'type' => 'text',
      'settings' => array(
      'max_length' => 60,
      ),
      ),
      'communities_quantity' => array(
      'field_name' => 'communities_quantity',
      'cardinality' => 1,
      'type' => 'text',
      ), */
    );
}



/*
 * Internal Function
 * 
 * Conversation-specific fields
 */
function _conversation_fields() {
    global $an_communities_field_facet_options;
    $fields = array();
    /*$fields[] = array(
			'field_name' => 'field_facet',
			'type' => 'list_text',
			'cardinality' => 1,
			'settings' => array(
				'allowed_values' => array_values($an_communities_field_facet_options),
			)
        );*/
    $fields[] = array(
        
            'field_name' => 'field_topic',
            'cardinality' => 1,
            'label' => 'Topic',
            'type' => 'taxonomy_term_reference',
            'description' => 'Please select the category that best fits the topic of your conversation.',
            'settings' => array(
                'allowed_values' => array(
                    array(
                        'vocabulary' => 'an_vocabulary_topic',
                        'parent' => 0,
                    )
                )
            )
        );
        
        //added by doyle 7/31 // edited by lauren 8/1
        $fields[] = array(    
            'field_name' => 'field_conversation_opener',
            'cardinality' => 1,
            'label' => 'Body',
            'description' => 'Provide your opening remarks of this conversation.',
            'type' => 'text_long',
            'entity_type' => 'node',
            'settings' => array(),
            'instance_settings' => array('text_processing' => 1), //Set the instance to be filtered html
        
    );
        //end added by doyle
    /*
    $fields[$vocab['machine_stem']] = array(
			'field_name' => ('field_tax_' . $vocab['machine_stem']),
			'cardinality' => FIELD_CARDINALITY_UNLIMITED,
			'label' => $vocab['name'],
			'type' => 'taxonomy_term_reference',
			'settings' => array(
				'allowed_values' => array(
					array(
						'vocabulary' => 'an_vocabulary_' . $vocab['machine_stem'],
						'parent' => 0,
					)
				)
			)
		);
     * 
     */
    return $fields;
}




/*
 * Internal Function
 * 
 * Community field instances
 */
function _community_instances() {
    //$t = get_t();
    
    return array(
        /* 'communities_color' => array(
          'field_name' => 'communities_color',
          'label' => $t('The colors available for this object.'),
          'widget' => array(
          'type' => 'text_textfield',
          ),
          'display' => array(
          'example_node_list' => array(
          'label' => 'hidden',
          'type' => 'communities_colors',
          ),
          ),
          ),
          'communities_quantity' => array(
          'field_name' => 'communities_quantity',
          'label' => $t('Quantity required'),
          'type' => 'text',
          'widget' => array(
          'type' => 'text_textfield',
          ),
          'display' => array(
          'example_node_list' => array(
          'label' => 'hidden',
          'type' => 'hidden',
          ),
          ),
          ), */

            'group_group' => array(
            'field_name' => OG_GROUP_FIELD,
            'label' => 'Group',
            //'type' => 'list_boolean',
            'settings' => array(''),
                
            'widget' => array(
                'module' => 'options',
                'settings' => array(),
                'type' => 'options_onoff',
                'weight' => 0,
            ),
            'default_value' => array(0 => array('value' => 1)), // Very important the default is true because we'll be hiding this in the create form
          /*  'display' => array(// For some reason this part doesn't work. No idea why!
                'default' => array(
                    'label' => 'hidden',
                    'type' => 'hidden',
                ),
                'full' => array(
                    'label' => 'hidden',
                    'type' => 'hidden'
                ),
                'teaser' => array(
                    'label' => 'hidden',
                    'type' => 'hidden'
                ),
            ),
           * 
           */
            'view modes' => array(
                'full' => array(
                //  'label' => t('Full'),
                'type' => 'og_group_subscribe',
                'custom settings' => FALSE,
                ),
                'teaser' => array(
                // 'label' => t('Teaser'),
                'type' => 'og_group_subscribe',
                'custom settings' => FALSE,
                ),
            ),
        ),
    );
}



/*
 * Internal Function
 * 
 * Conversation field instances
 */
function _conversation_instances() {
    return array(
        'group_audience' => array(
            'field_name' => OG_AUDIENCE_FIELD,
            'label' => 'Groups audience',
            'type' => 'group',
            'widget_type' => OG_AUDIENCE_FIELD,
            'default_value_function' => '1', // Or 'og_field_audience_default_value' instead of '1'
        ),
                /*'field_facet' => array('field_name' => 'field_facet',
			'entity_type' => 'node',
			'label' => 'Conversation Facet',
			'description' => 'Please select a category that this page falls under.',
			
			'required' => TRUE,
			
			
        ),*/
        //added by doyle 7/31 //edited by lauren 8/1
        'field_conversation_opener' => array(
            'field_name' => 'field_conversation_opener',
            'cardinality' => 1,
            'label' => 'Body',
            'description' => 'Provide your opening remarks of this conversation.',
            'type' => 'text_long',
            'entity_type' => 'node',
            'settings' => array(),
            'instance_settings' => array('text_processing' => 1), //Set the instance to be filtered html
        ),
        //end added by doyle
        'field_topic' => array(
            'field_name' => 'field_topic',
            'label' => 'Topic',
            'type' => 'taxonomy_term_reference',
            'required' => TRUE,
            'widget' => array(
                    'type' => 'options_buttons',
            ),
            'display' => array(
                    'default' => array(
                            'type' => 'taxonomy_term_reference_link',
                    ),
            ),
        )
    );
}



/*
 * hook_form_alter(&$form, &$form_state, $form_id)
 * 
 * Overrides the Community Add Form.
 * Sets the default to Not Publish, Not Promote, and not allow a user to Preview.
 */
function communities_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'community_node_form' && !$form['#node_edit_form']) {

        // Do not automatically publish
        $form['options']['status']['#default_value'] = FALSE;

        // Do not promote to front page
        $form['options']['promote']['#default_value'] = FALSE;

        // Don't allow Preview
        $form['actions']['preview']['#access'] = FALSE;
		
		// Don't allow Comments
		$form['comment_settings']['comment']['#default_value'] = '1';
    }

    return $form;
}



/*
 * hook_theme($existing, $type, $theme, $path)
 * 
 * Redirects a user to the custom node form when adding a Community.
 */
function communities_theme($existing, $type, $theme, $path) {

    return array(
        'community_node_form' => array(
            'arguments' => array('form' => null),
            'path' => ($path.'/includes'),
            'template' => 'community--node-form', //name of your template file, it can be anything
            'render element' => 'form'
        )
    );

    return $items;
}

function _preview_snippet($field, $maxLength = 256) {
    if(!$field){
        return; 
    }
    $content = filter_xss($field['und'][0]['value']);
    $teaser = $content;
    if(strlen($content) > $maxLength ){
        $teaser = wordwrap($content, $maxLength);
        $wrapPos = strpos($teaser, "\n");
        if($wrapPos){
            return substr($teaser, 0, $wrapPos).'...';
        }
    }
    return $teaser;
    
}

function _last_updated_snippet ($changed) {
    $o = '';
    if ($changed) {
        $o .= '<span class="conversation-last-updated">';
        $o .= 'Last Updated: ';
        $o .= date('M j, Y', $changed);
        $o .= '</span>';
        return $o;
    }
    return $o;
}

function _conversation_title_snippet($nid, $title, $changed = NULL) {
    $o = '<div class="conversation-title">';
    $o .= '<a href="' . url('node/' . $nid) . '">';
    //$output .= $node->title;
    $o .= check_plain($title);
    //$output .= filter_xss($node->title);
    $o .= '</a>';
    $o .= _last_updated_snippet($changed);
    $o .= '</div>';
    return $o;
}

function _get_latest_comment($node) {
    /*
     * doyle this functionality won't work...no text prints out??

    if ($node->type == 'conversation') {
        $opener = _get_conversation_opener($node);
        if ($opener) return _latest_comment_snippet($opener);
    }*/
    
    if ($node->comment_count)
    {
        return _latest_comment_snippet($node->cid);
    }
    else 
    {
        return _get_conversation_opener($node);
        
    }
}

function _get_conversation_opener($node) {

    $commenter = user_load($node->uid);

    $o = '<div class="latest-comment">'; // Start Comment
    // Recent Activity Text
    $o .= '<div class="recent-activity-text">';
    $o .= 'Recent Activity:';
    $o .= '</div>';

    // Most Recently Posted Comment
    $o .= '<div class="latest-comment-response">'; // Start Response


     $o .= '<div class="conversation-recent-comment-userpic">';
      $o .= _user_image_snippet($commenter);
      $o .= '</div>'; 



    $o .= '<div class="latest-comment-text">';
    $o .= _user_url_snippet($commenter->uid, $commenter->name);
    $o .= '<br/>';
    // !Doyle this is not outputting correctly. idk why.
    $o .= _preview_snippet($node->field_conversation_opener, 170);
    $o .= '</div>';


    $o .= '</div>'; // End Response

    $o .= '</div>'; // End Comment
    return $o;
}

function _latest_comment_snippet($commentID) {


    $comment = comment_load($commentID);

    $commenter = user_load($comment->uid);

    $o = '<div class="latest-comment">'; // Start Comment
    // Recent Activity Text
    $o .= '<div class="recent-activity-text">';
    $o .= 'Recent Activity:';
    $o .= '</div>';

    // Most Recently Posted Comment
    $o .= '<div class="latest-comment-response">'; // Start Response


      $o .= '<div class="conversation-recent-comment-userpic">';
      $o .= _user_image_snippet($commenter);
      $o .= '</div>'; 


    $o .= '<div class="latest-comment-text">';
    $o .= _user_url_snippet($commenter->uid, $commenter->name);
    $o .= '<br/>';
    $o .= _preview_snippet($comment->comment_body, 170);
    $o .= '</div>';


    $o .= '</div>'; // End Response

    $o .= '</div>'; // End Comment
    return $o;
}

function _user_url_snippet($uid, $name) {
    $o = '<a href="' . url('user/' . $uid) . '">';
    $o .= check_plain($name);
    $o .= '</a>';
    return $o;
}

function _user_image_snippet($user) {
    if(!user_is_logged_in())
        return '';
    global $nci_user_profile_colors;
    $avatar = field_get_items('user', $user, 'avatar_image');
    if($user->picture && !$avatar)
    {
        return theme('image_style',
                            array(
                                'path' => $user->picture->uri,
                                'style_name' => 'scale_25',         
                            )
                        );
    }
    if ($avatar) {
        $simulatedAvatarArray = array();
        foreach ($nci_user_profile_colors as $avatarColor) {
            $simulatedAvatarArray[] = 'male/'.$avatarColor;
            $simulatedAvatarArray[] = 'female/'.$avatarColor;
        }
        $avatarTMP = intval($avatar[0]['value']);
        $avatarTMP = $simulatedAvatarArray[$avatarTMP];
        $avatarSRC = '/' . path_to_theme() . '/accrualnet-internals/images/avatars/' . $avatarTMP . '.png';
    }
    else {
        $avatarSRC = '/' . path_to_theme() . '/accrualnet-internals/images/avatars/male/Black.png';

    }
    return '<img alt="'.check_plain($user->name).'\'s Image" src="'.$avatarSRC.'" width="25" title="'.check_plain($user->name).'\'s Image" alt="'.check_plain($user->name).'\'s Image" />';
}

function _starter_snippet($userID) {
    $user = user_load($userID);
    $o = '<div class="started-by">';
    $o .= 'Started by: ';
    $o .= _user_url_snippet($user->uid, $user->name);
    $o .= '</div>';
    return $o;
}

function communities_menu() {
  global $an_communities_field_facet_options;
  $items['communities'] = array(
    'title' => 'Communities and Conversations',
    'page callback' => 'communities_landing_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'communities.page.inc',
  ); 
  $items['communities/topics/%'] = array(
      'page callback' => 'communities_topic_page',
      'access arguments' => array('access content'),
      'page arguments' => array(2),
      'type' => MENU_SUGGESTED_ITEM,
      'file' => 'communities.page.inc',
  );
  $items['communities/communities_of_practice'] = array(
    'title' => 'Communities of Practice',
    'page callback' => 'communities_of_practice_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'communities.page.inc',
  );
  $items['communities/all_conversations'] = array(
    'title' => 'All Conversations',
    'page callback' => 'all_conversations_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'communities.page.inc',
  );
  /*
  foreach ($an_communities_field_facet_options as $machine => $name) {
      $items['communities/'.$machine] = array (
          'title' => $name,
          'page callback' => $machine.'_page',
          'access arguments' => array('access content'),
          'page arguments' => array($machine, $name),
          'type' => MENU_SUGGESTED_ITEM,
          'file' => 'communities_facets.page.inc',
      );
  }*/
  /*
  $items['communities/%'] = array (
    //'title' => 'Resources and Tools Level 2',
    'page callback' => 'resource_level_2_page',
    'access arguments' => array('access content'),
    'page arguments' => array(1),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'resource_level_2.pages.inc',
  );
  /*$items['resources/%/%'] = array (
    //'title' => 'Resources and Tools Level 3',
    'page callback' => 'resource_level_3_page',
    'access arguments' => array('access content'),
    'page arguments' => array(1,2),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'resource_level_3.pages.inc',
  );
  $items['communities/%/%'] = array(
    'title' => 'Literature and Tools Level 3',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resource_ajax_filter', 1, 2),
    'access callback' => TRUE,
    'weight' => 1,
  );*/

  return $items;
}
function communities_node_view($node, $view_mode, $langcode){ 
    
    global $an_community_types;
    global $an_communities_field_topic_options;
    
    if (!isset($an_community_types[$node->type]))
		return;
    
    $topic = field_get_items('node', $node, 'field_topic');
    $term = taxonomy_term_load($topic[0]['tid']);
    if($term)
        $term_machine = array_keys($an_communities_field_topic_options, $term->name);
    if(!empty($node->group_audience) || $node->type == 'community')
        menu_tree_set_path('an-main-nav', 'communities/communities_of_practice');
    elseif($term_machine && empty($node->group_audience))
        menu_tree_set_path('an-main-nav', 'communities/topics/'.$term_machine[0]);
    else
        menu_tree_set_path('an-main-nav', 'communities');
}

function _communities_convo_header($node, $term) {
    $output = '';
    //if we are viewing a group node
    if(!empty($node->group_audience) && array_key_exists('1', $node->group_audience)){
        $groupID = og_get_entity_groups('node', $node);
        $group = og_load($groupID[1]);
        $groupNode = node_load($group->etid);
        $groupBody = field_get_items('node', $groupNode, 'body');
        $output .= '<h1 class="title">'.check_plain($groupNode->title).'</h1>';
        $output .= '<div id="communities-topic-description">'.filter_xss($groupBody[0]['value']).'</div>';
        return $output;
    }
    //Not a group node
    $output .= '<h1 class="title">'.check_plain($term->name).'</h1>';
    $output .= '<div id="communities-topic-description">'.filter_xss($term->description).'</div>';
    return $output;
    
} 


?>