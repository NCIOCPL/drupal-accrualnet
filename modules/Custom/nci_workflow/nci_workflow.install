<?php

module_load_include('inc', 'resource', 'types');

/**
 * Implements hook_install().
 */
function nci_workflow_enable() {
	drupal_set_message("Enabling NCI Workflow...");

	// Create tables.
	_nci_workflow_insert_values();

	// set up permissions specific to the new workflow states
	_nci_workflow_set_permissions();

	_nci_workflow_config_moderation();

	cache_clear_all();
}

function nci_workflow_disable() {

}

/**
 * Adds default data for workflow states
 */
function _nci_workflow_insert_values() {
	try {
		// delete old 'needs review' state, should also wipe out any default
		// transitions by virtue of the being the original middle state
		$review_state = workbench_moderation_state_load('needs_review');

		if ($review_state) {
			workbench_moderation_state_delete($review_state);
		}


		// add nci states, can overwrite existing states safely
		$states = array(
			array(
				'name' => 'new',
				'label' => 'New',
				'description' => 'Newly submitted resource, needs approval before drafting.',
				'weight' => -4
			),
			array(
				'name' => 'draft',
				'label' => 'Draft',
				'description' => 'Resources assigned to a write for completion.',
				'weight' => -3
			),
			array(
				'name' => 'writer_review',
				'label' => 'Writer Review',
				'description' => 'Under review by the writing team.',
				'weight' => -2
			),
			array(
				'name' => 'editor_review',
				'label' => 'Editorial Review',
				'description' => 'Under review by the editorial team.',
				'weight' => -1
			),
			array(
				'name' => 'published',
				'label' => 'Published',
				'description' => 'Published and live on the site.',
				'weight' => 0
			),
			array(
				'name' => 'canceled',
				'label' => 'Cancelled',
				'description' => 'Removed from the workflow.',
				'weight' => 1
			),
			array(
				'name' => 'unpublished',
				'label' => 'Unpublished',
				'description' => 'Removed from the published state.',
				'weight' => 2
			)
		);

		// Save states to the database.
		foreach ($states as $state) {
			workbench_moderation_state_save((object) $state);
		}

		// add nci transitions
		$transitions = array(
			array(
				'from_name' => 'new',
				'to_name' => 'draft',
			),
			array(
				'from_name' => 'new',
				'to_name' => 'canceled',
			),
			array(
				'from_name' => 'draft',
				'to_name' => 'writer_review',
			),
			array(
				'from_name' => 'writer_review',
				'to_name' => 'editor_review',
			),
			array(
				'from_name' => 'writer_review',
				'to_name' => 'draft',
			),
			array(
				'from_name' => 'editor_review',
				'to_name' => 'writer_review',
			),
			array(
				'from_name' => 'editor_review',
				'to_name' => 'published',
			),
			array(
				'from_name' => 'editor_review',
				'to_name' => 'canceled',
			),
			array(
				'from_name' => 'published',
				'to_name' => 'unpublished',
			),
			array(
				'from_name' => 'unpublished',
				'to_name' => 'draft',
			),
			array(
				'from_name' => 'unpublished',
				'to_name' => 'editor_review',
			),
			array(
				'from_name' => 'canceled',
				'to_name' => 'draft',
			),
			array(
				'from_name' => 'canceled',
				'to_name' => 'editor_review',
			)
		);

		// Save default transitions to the database.
		foreach ($transitions as $transition) {
			workbench_moderation_transition_save((object) $transition);
		}
	} catch (Exception $e) {
		drupal_set_message(print_r($e->getMessage(), true), 'error');
	}
}

function _nci_workflow_set_permissions() {
	try {

		$anon = 0;
		$auth = 1;
		$writer = 2;
		$anstaff = 3;
		$admin = 4;

		$moderation_perms = array(
			'moderate content from new to draft' => array(
				$anon => FALSE,
				$auth => FALSE,
				$writer => FALSE,
				$anstaff => TRUE,
				$admin => TRUE
			),
			'moderate content from new to canceled' => array(
				$anon => FALSE,
				$auth => FALSE,
				$writer => FALSE,
				$anstaff => TRUE,
				$admin => TRUE
			),
			'moderate content from draft to writer_review' => array(
				$anon => FALSE,
				$auth => FALSE,
				$writer => TRUE,
				$anstaff => TRUE,
				$admin => TRUE
			),
			'moderate content from writer_review to editor_review' => array(
				$anon => FALSE,
				$auth => FALSE,
				$writer => TRUE,
				$anstaff => TRUE,
				$admin => TRUE
			),
			'moderate content from writer_review to draft' => array(
				$anon => FALSE,
				$auth => FALSE,
				$writer => TRUE,
				$anstaff => TRUE,
				$admin => TRUE
			),
			'moderate content from editor_review to published' => array(
				$anon => FALSE,
				$auth => FALSE,
				$writer => FALSE,
				$anstaff => TRUE,
				$admin => TRUE
			),
			'moderate content from editor_review to writer_review' => array(
				$anon => FALSE,
				$auth => FALSE,
				$writer => FALSE,
				$anstaff => TRUE,
				$admin => TRUE
			),
			'moderate content from editor_review to canceled' => array(
				$anon => FALSE,
				$auth => FALSE,
				$writer => FALSE,
				$anstaff => TRUE,
				$admin => TRUE
			),
			'moderate content from published to unpublished' => array(
				$anon => FALSE,
				$auth => FALSE,
				$writer => FALSE,
				$anstaff => TRUE,
				$admin => TRUE
			),
			'moderate content from unpublished to draft' => array(
				$anon => FALSE,
				$auth => FALSE,
				$writer => FALSE,
				$anstaff => TRUE,
				$admin => TRUE
			),
			'moderate content from canceled to draft' => array(
				$anon => FALSE,
				$auth => FALSE,
				$writer => FALSE,
				$anstaff => TRUE,
				$admin => TRUE
			),
			'moderate content from unpublished to editor_review' => array(
				$anon => FALSE,
				$auth => FALSE,
				$writer => FALSE,
				$anstaff => TRUE,
				$admin => TRUE
			),
			'moderate content from canceled to editor_review' => array(
				$anon => FALSE,
				$auth => FALSE,
				$writer => FALSE,
				$anstaff => TRUE,
				$admin => TRUE
			),
		);

		$anon_perms = array();
		$auth_perms = array();
		$writer_perms = array();
		$anstaff_perms = array();
		$admin_perms = array();

		foreach ($moderation_perms as $perm => $role) {
			$anon_perms[$perm] = $role[$anon];
			$auth_perms[$perm] = $role[$auth];
			$writer_perms[$perm] = $role[$writer];
			$anstaff_perms[$perm] = $role[$anstaff];
			$admin_perms[$perm] = $role[$admin];
		}

		_nci_roles_and_permissions_update_perms('Anonymous User', $anon_perms);
		_nci_roles_and_permissions_update_perms('Authenticated User', $auth_perms);
		_nci_roles_and_permissions_update_perms('Writer', $writer_perms);
		_nci_roles_and_permissions_update_perms('AccrualNet Staff', $anstaff_perms);
		_nci_roles_and_permissions_update_perms('administrator', $admin_perms);
	} catch (Exception $e) {
		drupal_set_message(print_r($e->getMessage(), true), 'error');
	}
}

function _nci_workflow_config_moderation() {
	// grab the views
	$views = views_get_all_views();
	//drupal_set_message(print_r(array_keys($views), TRUE));
	// get the array representing the disabled state of all views
	$status = variable_get('views_defaults', array());

	// set all workbench views to disabled
	$count = 0;
	$disabled = array();
	$other = 0;
	foreach ($views as $view => $object) {
		// if the view belongs to the workbench...
		if (strpos($view, 'workbench_') === 0) {
			// record how many views were switched to disabled
			// (state from false to true)
			if (!isset($status[$view]) || $status[$view] == FALSE)
				$disabled[] = $view;
			else
				$count++;

			// flag as disabled regardless
			$status[$view] = TRUE;
		}
		else
			$other++;
	}

	$num_disabled = sizeof($disabled);
	drupal_set_message("Disabled $num_disabled Workbench views, $count already disabled;\n\t$other non-Workbench views ignored.");
	$str_disabled = print_r($disabled, TRUE);
	if ($num_disabled > 0)
		drupal_set_message("Newly disabled views = $str_disabled");

	// set the array back into variables and clear the views/menu cache
	variable_set('views_defaults', $status);
	views_invalidate_cache();
	menu_rebuild();
}

function _nci_workflow_build_vocabulary($name, $machine_name, $weight) {
	$t = get_t();
	$vocabulary = new stdClass();
	$vocabulary->name = $t($name);
	$vocabulary->module = 'nci_workflow';
	$vocabulary->machine_name = $machine_name;
	$vocabulary->hierarchy = 1;
	$vocabulary->weight = $weight;
	return $vocabulary;
}

function _nci_workflow_build_term($name, $vocabulary, $weight, $parent = 0) {
	$t = get_t();
	$term = new stdClass();
	$term->name = $t($name);
	$term->vid = $vocabulary->vid;
	$term->weight = $weight;
	$term->parent = $parent;

	return $term;
}

?>