<?php

$GLOBALS['role_mod_state_map'] = array(
	'Writer' => array(1 => 'Draft', 'Writer Review'),
	'AccrualNet Staff' => array(1 => 'New', 'Editorial Review', 'Published')
);

function nci_workflow_form_alter(&$form, &$form_state) {
	if ($form['#action'] == '/node/add/resource') {
		// hide most of the elements
		$form['field_tax_patient_related']['#access'] = FALSE;
		$form['field_tax_provider_related']['#access'] = FALSE;
		$form['field_tax_systems_and_regulatory']['#access'] = FALSE;
		$form['field_tax_study']['#access'] = FALSE;
		$form['field_tax_ethical']['#access'] = FALSE;
		$form['field_tax_demographics']['#access'] = FALSE;
		$form['field_tax_recruitment_vehicles']['#access'] = FALSE;
		$form['field_tax_resource_type']['#access'] = FALSE;
		$form['field_tax_trial_treatment']['#access'] = FALSE;
		$form['field_tax_trial_phase']['#access'] = FALSE;
		$form['field_assigned_writer']['#access'] = FALSE;
		$form['field_assigned_editor']['#access'] = FALSE;
	} else {
		global $user;

		if (isset($form['field_assigned_writer'])) {
			$role = "Writer";
			$form_widget = &$form['field_assigned_writer'];
			$node_widget = &$form['#node']->field_assigned_writer;
			nci_workflow_fill_users($form_widget, $node_widget, $role);
		}

		if (isset($form['field_assigned_editor'])) {
			$role = "AccrualNet Staff";
			$form_widget = &$form['field_assigned_editor'];
			$node_widget = &$form['#node']->field_assigned_editor;
			nci_workflow_fill_users($form_widget, $node_widget, $role);
		}
	}
}

function nci_workflow_fill_users(&$form_widget, $node_widget, $role) {
	// query the database to fill the assigned users fields with appropriate data
	// filter the provided role for valid values
	global $role_mod_state_map;
	if (!isset($role_mod_state_map[$role]))
		return;

	// get the current value, if it exists
	$value = null;
	if (isset($node_widget['und']['0']['value'])) {
		$value = $node_widget['und']['0']['value'];
	}

	// determine if the current user has access to the intended field
	global $user;
	// if the current user's roles contain either the role to assign or
	// administrator, allow the field to be populated and set
	$access = (array_search($role, $user->roles) !== FALSE ||
			array_search('administrator', $user->roles) !== FALSE);

	// if access is allowed...
	if ($access) {
		$query = "SELECT an_users.uid, an_users.name as user_name, rid, role_name " .
				"FROM " .
				"(SELECT an_users_roles.uid, an_users_roles.rid, an_role.name AS role_name " .
				"FROM an_users_roles  " .
				"INNER JOIN an_role  " .
				"ON an_users_roles.rid = an_role.rid " .
				"WHERE an_role.name in ('" . $role . "')) " .
				"AS role_uids " .
				"INNER JOIN an_users " .
				"ON an_users.uid = role_uids.uid;";

		$result = db_query($query);

		foreach ($result as $record) {
			$rows[] = $record;
		}

		if (!isset($rows))
			return;

		// set the current value, if it exists
		if (isset($value)) {
			// update the default value to match
			$form_widget['und']['#default_value'] = $value;
		}

		// fill the select options with the available users
		foreach ($rows as $row) {
			$uid = $row->uid;
			$username = $row->user_name;
			$form_widget['und']['#options'][$uid] = $username;
		}
	} else {
		// remove the select entirely and drop the current value in as
		// markup

		$markup = '<i>unassigned</i>';
		if (isset($value)) {
			// look up the related user
			$assigned = user_load($value);
			if (isset($assigned)) {
				$markup = $assigned->name;
			}
		}

		// preserve the title and replace the select with the markup
		$form_widget['und'] = array(
			'#type' => 'item',
			'#title' => $form_widget['und']['#title'],
			'#markup' => $markup
		);
	}
}

function nci_workflow_session_fill_users($role) {
	// filter the provided role for valid values
	global $role_mod_state_map;
	if (!isset($role_mod_state_map[$role]))
		return;

	// query the database to fill the assigned users fields with appropriate data
	$query = "SELECT an_users.uid, an_users.name as user_name, rid, role_name " .
			"FROM " .
			"(SELECT an_users_roles.uid, an_users_roles.rid, an_role.name AS role_name " .
			"FROM an_users_roles  " .
			"INNER JOIN an_role  " .
			"ON an_users_roles.rid = an_role.rid " .
			"WHERE an_role.name in ('" . $role . "')) " .
			"AS role_uids " .
			"INNER JOIN an_users " .
			"ON an_users.uid = role_uids.uid;";

	$result = db_query($query);

	foreach ($result as $record) {
		$rows[] = $record;
	}

	if (!isset($rows))
		return;

// fill the select options with the available users
	foreach ($rows as $row) {
		$uid = $row->uid;
		$username = $row->user_name;
		$_SESSION['current_users'][$role][$uid] = $username;
	}
}

/**
 * Returns a role name for a given moderation state.
 *
 */
function nci_workflow_get_role($state) {
	global $role_mod_state_map;

	foreach ($role_mod_state_map as $role => $states) {
		$found = array_search($state, $states);

		if ($found) {
			return $role;
		}
	}
}

function nci_workflow_workbench_content_alter(&$output) {

	unset($output['workbench_current_user']);
	unset($output['workbench_edited']);
	unset($output['workbench_recent_content']);

	global $user;
	$roles = $user->roles;

	if (array_search('Writer', $roles) !== FALSE) {
		$output['workbench_writer_inbox'] = array(
			'#view' => 'an_workflow',
			'#view_display' => 'block_writer_inbox',
			'#attributes' => array('class' => array('clearfix'), 'style' => array('clear: both;')),
			'#theme' => 'workbench_element',
		);
	}

	if (array_search('AccrualNet Staff', $roles) !== FALSE) {
		$output['workbench_editor_inbox'] = array(
			'#view' => 'an_workflow',
			'#view_display' => 'block_editor_inbox',
			'#attributes' => array('class' => array('clearfix'), 'style' => array('clear: both;')),
			'#theme' => 'workbench_element',
		);
	}

	$output['workbench_all_content'] = array(
		'#view' => 'an_workflow',
		'#view_display' => 'block_all_content',
		'#attributes' => array('class' => array('clearfix'), 'style' => array('clear: both;')),
		'#theme' => 'workbench_element',
	);
}

function nci_workflow_menu_alter(&$items) {
	$unset_paths = array();

	if (isset($items)) {
		foreach ($items as $path => $item) {
			$ret = strpos($path, 'admin/workbench/');

			if ($ret === FALSE || $ret > 0) {
				continue;
			} else if ($path == 'admin/workbench/content') {
				$items[$path]['title'] = 'All Content';
			} else {
				$unset_paths[] = $path;
				unset($items[$path]);
			}
		}
	}

	/* if (count($unset_paths) > 0) {
	  $str_unset = print_r($unset_paths, TRUE);
	  drupal_set_message("Unset the following Workbench menu paths: $str_unset");
	  } */
}

/**
 * Implements hook_views_api().
 */
function nci_workflow_views_api() {
	return array('api' => 2.0);
}

/**
 * This hook is used to set the workbench acess section appropriately for each
 * moderation transition.
 * @param <Node> $node
 * @param <String> $previous_state
 * @param <String> $new_state
 */
function nci_workflow_workbench_moderation_transition($node, $previous_state, $new_state) {
	$terms = NULL;

	switch ($new_state) {
		case 'draft':
		case 'writer_review':
			// grab the needed tid for the access level
			$terms = taxonomy_get_term_by_name('Writers');
			break;
		case 'unpublished':
		case 'canceled':
			// ensure that the node is unpublished if moving to an appropriate state
			node_unpublish_action($node);
			node_save($node);
		default:
			// grab the needed tid for the access level
			$terms = taxonomy_get_term_by_name('Editors');
			break;
	}

	if (!isset($terms))
		return;

	$tid = NULL;
	foreach ($terms as $term) {
		$tid = $term->tid;
		break;
	}

	// if the tid is found, update the node and workbench access
	if (isset($tid)) {
		$node->workbench_access = array($tid => $tid);
	}

	// call the access node insert method
	// (removes the node from the access db first and re-adds, avoiding
	// key collisions)
	workbench_access_node_insert($node);
}

function nci_workflow_assign_form($form, &$form_state, $nid, $role, $assigned_user, $current_users) {
	$status_id = check_plain("assign_select_$nid");

	$form += array(
		'#type' => 'form',
		'#attributes' => array(
			'autocomplete' => 'off'
		)
	);

	$options = array('' => '- none -');
	$value = '';
	foreach ($current_users as $uid => $name) {
		if ($assigned_user == $uid)
			$value = $uid;
		$options[$uid] = $name;
	}

	// build the AJAX element
	$ajax = array(
		'callback' => 'nci_workflow_assign_js',
		'wrapper' => $status_id,
		'method' => 'replace',
		'effect' => 'fade',
		'progress' => array(
			'type' => 'throbber',
			'message' => ''
		)
	);

	$form['assign_select'] = array(
		'#type' => 'select',
		'#options' => $options,
		'#value' => array($value),
		'#ajax' => $ajax
	);

	// add a div to receive return output
	$form['assign_status'] = array(
		'#type' => 'container',
		'#id' => $status_id,
		'#attributes' => array(
			'class' => array('assign_to_status')
		),
		'inner' => array(
			'#markup' => '&nbsp'
		),
	);

	return $form;
}

function nci_workflow_assign_js($form, $form_state) {

	// get the machine name for the role
	$role = $form_state['build_info']['args'][1];
	$field_name = "field_assigned_" . (($role == 'Writer') ? 'writer' : 'editor');


	$nid = $form_state['build_info']['args'][0];
	$assigned_user = $form_state['input']['assign_select'];

	$node = node_load($nid);
	$node = workbench_moderation_node_current_load($node);

	if (empty($assigned_user)) {
		// clear the field if the user is empty
		$node->$field_name = array();
		$output = 'unassigned.';
	} else {
		// assign the field with the chosen uid
		$node->$field_name = array(
			'und' => array(
				0 => array(
					'value' => $assigned_user
				)
			)
		);
		$output = 'assigned.';
	}

	// preserve the current moderation state
	$node->workbench_moderation_state_new = $node->workbench_moderation['current']->state;
	$node->workbench_moderation_state_current = $node->workbench_moderation['current']->state;

	node_save($node);

	//$output .= kprint_r($node, TRUE, '$node post-save');
	$form['assign_status']['inner']['#markup'] = $output;

	return $form['assign_status'];
}

?>
